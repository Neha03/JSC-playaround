/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <JavaScriptCore/JavaScript.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
	bool swigCMemOwn;
	void *swigCObject;
}SWIG_PRV_DATA; 


 
bool jsc_registerClass(JSGlobalContextRef& context, JSObjectRef& parentObject,
                             const char* className,
                             JSClassDefinition* definition) {

    JSStringRef js_className = JSStringCreateWithUTF8CString(className);
    
    JSObjectRef classObject = JSObjectMake(context, JSClassCreate(definition), NULL);

    JSObjectSetProperty(context, parentObject,
                        js_className, classObject,
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_className);
    
    return true;
}

bool jsc_registerFunction(JSGlobalContextRef context, JSObjectRef object, 
                        const char* functionName, JSObjectCallAsFunctionCallback callback)
{
    JSStringRef js_functionName = JSStringCreateWithUTF8CString(functionName);
    JSObjectSetProperty(context, object, js_functionName,
                        JSObjectMakeFunctionWithCallback(context, js_functionName, callback), 
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_functionName);
    return true;
}



#include "example.h"



JSValueRef _wrap_RED(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = RED;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSValueRef _wrap_BLUE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = BLUE;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSValueRef _wrap_GREEN(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = GREEN;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSValueRef _wrap_Foo_IMPULSE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = Foo::IMPULSE;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSValueRef _wrap_Foo_WARP(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = Foo::WARP;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSValueRef _wrap_Foo_LUDICROUS(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  int result;
  
  result = Foo::LUDICROUS;
  jsresult = JSValueMakeNumber(context, result); 
  
  return jsresult;
}


JSStaticValue Foo_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction Foo_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

JSStaticValue Foo_values[] = {
  {
    "Foo::IMPULSE",_wrap_Foo_IMPULSE, NULL,kJSPropertyAttributeNone
  },{
    "Foo::WARP",_wrap_Foo_WARP, NULL,kJSPropertyAttributeNone
  },{
    "Foo::LUDICROUS",_wrap_Foo_LUDICROUS, NULL,kJSPropertyAttributeNone
  },
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction Foo_functions[] = {
  {
    0, 0, 0 
  }
};

JSClassDefinition Foo_classDefinition;

JSClassDefinition Foo_objectDefinition;

JSClassRef Foo_classRef;


JSObjectRef _wrap_create_Foo__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  Foo *result;
  result = (Foo *)new Foo();
  
  
  
  SWIG_PRV_DATA *swigprivatedata = new SWIG_PRV_DATA();
  swigprivatedata->swigCMemOwn = true;
  swigprivatedata->swigCObject = result;
  
  JSObjectSetPrivate(thisObject, swigprivatedata);
  
  return thisObject;
}


JSObjectRef _wrap_create_Foo(JSContextRef context, JSObjectRef ctorObject, 
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = JSObjectMake(context, Foo_classRef, NULL);
  
  if(argc == 0) {
    thisObject = _wrap_create_Foo__SWIG_0(context, thisObject, argc, argv, exception);
  } else 
  {
    // TODO: handle illegal arguments
    thisObject = JSValueToObject(context, JSValueMakeUndefined(context), exception);
  }
  
  return thisObject;
}


void _wrap_Foo_finalize(JSObjectRef thisObject)
{
  SWIG_PRV_DATA* t = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
  if(t && t->swigCMemOwn) delete (Foo*)(t->swigCObject);
  if(t) delete t;
}



JSStaticValue global_values[] = {
  {
    "RED",_wrap_RED, NULL,kJSPropertyAttributeNone
  },{
    "BLUE",_wrap_BLUE, NULL,kJSPropertyAttributeNone
  },{
    "GREEN",_wrap_GREEN, NULL,kJSPropertyAttributeNone
  },
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction global_functions[] = {
  {
    0, 0, 0 
  }
};

JSClassDefinition global_classDefinition;


bool example_initialize(JSGlobalContextRef context) {
  JSObjectRef globalObject = JSContextGetGlobalObject(context);
  
  global_classDefinition.staticValues = global_values;
  global_classDefinition.staticFunctions = global_functions;
  jsc_registerClass(context, globalObject, "cvar", &global_classDefinition);
  
  
  Foo_classDefinition.staticFunctions = Foo_staticFunctions;
  Foo_classDefinition.staticValues = Foo_staticValues;
  Foo_classDefinition.callAsConstructor = _wrap_create_Foo;
  Foo_objectDefinition.staticValues = Foo_values;
  Foo_objectDefinition.staticFunctions = Foo_functions;
  Foo_classRef = JSClassCreate(&Foo_objectDefinition);
  jsc_registerClass(context, globalObject, "Foo", &Foo_classDefinition);
  
  
  return true;
}

