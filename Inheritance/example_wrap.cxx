/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <JavaScriptCore/JavaScript.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
	bool swigCMemOwn;
	void *swigCObject;
}SWIG_PRV_DATA; 


 
bool jsc_registerClass(JSGlobalContextRef& context, JSObjectRef& parentObject,
                             const char* className,
                             JSClassDefinition* definition) {

    JSStringRef js_className = JSStringCreateWithUTF8CString(className);
    
    JSObjectRef classObject = JSObjectMake(context, JSClassCreate(definition), NULL);

    JSObjectSetProperty(context, parentObject,
                        js_className, classObject,
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_className);
    
    return true;
}

bool jsc_registerNamespace(JSGlobalContextRef& context, 
                           JSObjectRef& namespaceObj, JSObjectRef& parentNamespace,
                           const char* name)
{
    JSStringRef js_name = JSStringCreateWithUTF8CString(name);
    
    JSObjectSetProperty(context, parentNamespace,
                        js_name, namespaceObj,
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_name);
    
    return true;
}


bool jsc_registerFunction(JSGlobalContextRef context, JSObjectRef object, 
                        const char* functionName, JSObjectCallAsFunctionCallback callback)
{
    JSStringRef js_functionName = JSStringCreateWithUTF8CString(functionName);
    JSObjectSetProperty(context, object, js_functionName,
                        JSObjectMakeFunctionWithCallback(context, js_functionName, callback), 
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_functionName);
    return true;
}



#include "example.h"


//begin fragment("functionwrapper")


JSValueRef _wrap_A_foo(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  A *arg1 = (A *) 0 ;
  JSValueRef jsresult;
  
  
  // Sanity check if the call is not on the global object
  if (!JSValueIsEqual(context,
      JSValueToObject(context,thisObject,NULL),
      JSValueToObject(context,JSContextGetGlobalObject(context), NULL),
      NULL)) {
    SWIG_PRV_DATA* arg1_swigprivatedata = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
    arg1 = (A *)arg1_swigprivatedata->swigCObject;
  }
  
  
  JSObjectRef oarg1 = JSValueToObject(context,thisObject, NULL);
  SWIG_PRV_DATA *arg1_privatedata = (SWIG_PRV_DATA *)JSObjectGetPrivate(oarg1);
  arg1 = (A *)arg1_privatedata->swigCObject;
  
  (arg1)->foo();
  jsresult = JSValueMakeUndefined(context); 
  
  return jsresult;
}

//end fragment("functionwrapper")

//begin fragment("functionwrapper")


JSValueRef _wrap_A_bar(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  A *arg1 = (A *) 0 ;
  JSValueRef jsresult;
  
  
  // Sanity check if the call is not on the global object
  if (!JSValueIsEqual(context,
      JSValueToObject(context,thisObject,NULL),
      JSValueToObject(context,JSContextGetGlobalObject(context), NULL),
      NULL)) {
    SWIG_PRV_DATA* arg1_swigprivatedata = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
    arg1 = (A *)arg1_swigprivatedata->swigCObject;
  }
  
  
  JSObjectRef oarg1 = JSValueToObject(context,thisObject, NULL);
  SWIG_PRV_DATA *arg1_privatedata = (SWIG_PRV_DATA *)JSObjectGetPrivate(oarg1);
  arg1 = (A *)arg1_privatedata->swigCObject;
  
  (arg1)->bar();
  jsresult = JSValueMakeUndefined(context); 
  
  return jsresult;
}

//end fragment("functionwrapper")

//begin fragment("classdefn")


JSStaticValue A_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction A_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

JSStaticValue A_values[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction A_functions[] = {
  //begin fragment("functiondecl")
  
  {
    "foo",_wrap_A_foo, kJSPropertyAttributeNone
  },
  //end fragment("functiondecl")
  //begin fragment("functiondecl")
  
  {
    "bar",_wrap_A_bar, kJSPropertyAttributeNone
  },
  //end fragment("functiondecl")
  
  {
    0, 0, 0 
  }
};

JSClassDefinition A_classDefinition;

JSClassDefinition A_objectDefinition;

JSClassRef A_classRef;

//end fragment("classdefn")

//begin fragment("ctordefn")


JSObjectRef _wrap_create_A_A__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  A *result;
  result = (A *)new A();
  
  
  
  SWIG_PRV_DATA *swigprivatedata = new SWIG_PRV_DATA();
  swigprivatedata->swigCMemOwn = true;
  swigprivatedata->swigCObject = result;
  
  JSObjectSetPrivate(thisObject, swigprivatedata);
  
  return thisObject;
}

//end fragment("ctordefn")

//begin fragment("mainctordefn")


JSObjectRef _wrap_create_A(JSContextRef context, JSObjectRef ctorObject, 
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = JSObjectMake(context, A_classRef, NULL);
  
  //begin fragment("ctor_dispatch_case")
  
  if(argc == 0) {
    thisObject = _wrap_create_A_A__SWIG_0(context, thisObject, argc, argv, exception);
  } else 
  //end fragment("ctor_dispatch_case")
  
  {
    // TODO: handle illegal arguments
    thisObject = JSValueToObject(context, JSValueMakeUndefined(context), exception);
  }
  
  return thisObject;
}

//end fragment("mainctordefn")

//begin fragment("destructordefn")


void _wrap_A_finalize(JSObjectRef thisObject)
{
  SWIG_PRV_DATA* t = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
  if(t && t->swigCMemOwn) delete (A*)(t->swigCObject);
  if(t) delete t;
}

//end fragment("destructordefn")

//begin fragment("functionwrapper")


JSValueRef _wrap_B_bar(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  B *arg1 = (B *) 0 ;
  JSValueRef jsresult;
  
  
  // Sanity check if the call is not on the global object
  if (!JSValueIsEqual(context,
      JSValueToObject(context,thisObject,NULL),
      JSValueToObject(context,JSContextGetGlobalObject(context), NULL),
      NULL)) {
    SWIG_PRV_DATA* arg1_swigprivatedata = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
    arg1 = (B *)arg1_swigprivatedata->swigCObject;
  }
  
  
  JSObjectRef oarg1 = JSValueToObject(context,thisObject, NULL);
  SWIG_PRV_DATA *arg1_privatedata = (SWIG_PRV_DATA *)JSObjectGetPrivate(oarg1);
  arg1 = (B *)arg1_privatedata->swigCObject;
  
  (arg1)->bar();
  jsresult = JSValueMakeUndefined(context); 
  
  return jsresult;
}

//end fragment("functionwrapper")

//begin fragment("classdefn")


JSStaticValue B_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction B_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

JSStaticValue B_values[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction B_functions[] = {
  //begin fragment("functiondecl")
  
  {
    "bar",_wrap_B_bar, kJSPropertyAttributeNone
  },
  //end fragment("functiondecl")
  
  {
    0, 0, 0 
  }
};

JSClassDefinition B_classDefinition;

JSClassDefinition B_objectDefinition;

JSClassRef B_classRef;

//end fragment("classdefn")

//begin fragment("ctordefn")


JSObjectRef _wrap_create_B_B__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  B *result;
  result = (B *)new B();
  
  
  
  SWIG_PRV_DATA *swigprivatedata = new SWIG_PRV_DATA();
  swigprivatedata->swigCMemOwn = true;
  swigprivatedata->swigCObject = result;
  
  JSObjectSetPrivate(thisObject, swigprivatedata);
  
  return thisObject;
}

//end fragment("ctordefn")

//begin fragment("mainctordefn")


JSObjectRef _wrap_create_B(JSContextRef context, JSObjectRef ctorObject, 
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = JSObjectMake(context, B_classRef, NULL);
  
  //begin fragment("ctor_dispatch_case")
  
  if(argc == 0) {
    thisObject = _wrap_create_B_B__SWIG_0(context, thisObject, argc, argv, exception);
  } else 
  //end fragment("ctor_dispatch_case")
  
  {
    // TODO: handle illegal arguments
    thisObject = JSValueToObject(context, JSValueMakeUndefined(context), exception);
  }
  
  return thisObject;
}

//end fragment("mainctordefn")

//begin fragment("destructordefn")


void _wrap_B_finalize(JSObjectRef thisObject)
{
  SWIG_PRV_DATA* t = (SWIG_PRV_DATA*)JSObjectGetPrivate(thisObject);
  if(t && t->swigCMemOwn) delete (B*)(t->swigCObject);
  if(t) delete t;
}

//end fragment("destructordefn")


//begin fragment("globaldefn")


JSStaticValue example_values[] = {
  {
    0, 0, 0, 0 
  }
};

JSStaticFunction example_functions[] = {
  {
    0, 0, 0 
  }
};

JSClassDefinition example_classDefinition;

//end fragment("globaldefn")

//begin fragment("jsc_initializer")


bool example_initialize(JSGlobalContextRef context) {
  JSObjectRef global_object = JSContextGetGlobalObject(context);
  
  /* Create objects for namespaces */
  //begin fragment("create_namespace")
  
  example_classDefinition.staticFunctions = example_functions;
  example_classDefinition.staticValues = example_values;
  JSObjectRef example_object = JSObjectMake(context, JSClassCreate(&example_classDefinition), NULL);
  
  //end fragment("create_namespace")
  
  
  /* Create classes */
  //begin fragment("create_class_template")
  
  A_classDefinition.staticFunctions = A_staticFunctions;
  A_classDefinition.staticValues = A_staticValues;
  A_classDefinition.callAsConstructor = _wrap_create_A;
  A_objectDefinition.staticValues = A_values;
  A_objectDefinition.staticFunctions = A_functions;
  A_classRef = JSClassCreate(&A_objectDefinition);
  //end fragment("create_class_template")
  
  //begin fragment("register_class")
  
  jsc_registerClass(context, example_object, "A", &A_classDefinition);
  //end fragment("register_class")
  
  //begin fragment("create_class_template")
  
  B_classDefinition.staticFunctions = B_staticFunctions;
  B_classDefinition.staticValues = B_staticValues;
  B_classDefinition.callAsConstructor = _wrap_create_B;
  B_objectDefinition.staticValues = B_values;
  B_objectDefinition.staticFunctions = B_functions;
  B_classRef = JSClassCreate(&B_objectDefinition);
  //end fragment("create_class_template")
  
  //begin fragment("register_class")
  
  jsc_registerClass(context, example_object, "B", &B_classDefinition);
  //end fragment("register_class")
  
  
  
  /* Register namespaces */
  //begin fragment("register_namespace")
  
  
  jsc_registerNamespace(context, example_object, global_object, "example"); 
  //end fragment("register_namespace")
  
  
  return true;
}

//end fragment("jsc_initializer")

